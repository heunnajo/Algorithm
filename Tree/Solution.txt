트리 순회
1. Preorder : 부모 노드로 자식 노드 값을 구할 때
2. Inorder
3. Postorder : 자식 노드 값으로 현재 노드 값을 구할 때
=> 각각 순회 순서보다 각각의 의미가 더 중요하다!

트리 종류
1. 이진 트리(Binary Tree) : 자식을 최대 2개만 가지고 있는 트리
2. 포화 이진 트리(Perfect Binary Tree)
- 리프노드를 제외한 노드의 자식의 수 2
- 리프 노드의 자식의 수 : 0
- 모든 리프 노듣의 깊이가 같아야 함
- 높이가 h인 트리의 노드 갯수 = 2^h -1
3. 완전 이진 트리(Complete Binary Tree)
- 리프 노드를 제외한 노드의 자식의 수 : 2
- 리프 노드의 자식의 수 : 0
- 마지막 레벨에는 노드가 일부는 없을 수도 있음
- 오른쪽에서부터 몇 개가 사라진 형태

트리의 표현
- 트리는 그래프이기 때문에 그래프의 표현과 같은 방식으로 저장할 수 있다.
- 또는 트리의 모든 노드는 부모를 하나 또는 0개만 가지기 때문에 부모만 저장하는 방식으로 저장할 수 있다.
- 부모가 0개인 경우는 트리의 루트인데, 이 경우 부모를 -1이나 0으로 처리하는 방식을 사용한다.

트리의 부모만 저장하는 방식 : Union-Find에서 이용
          1
      /      \
     2        3
    /  \     /  \
   4    5   6    7

   i      1 2 3 4 5 6 7
parent[i] 0 1 1 2 2 3 3

배열로 표현하는 방식
완전 이진 트리의 경우 배열로 표현 가능.
부모의 노드가 x인 경우 자식의 노드는 2*x, 2*x+1로 나타내면 된다.

구조체나 클래스 이용 방식 : 이진 트리의 경우
class Node {
  int left;  int right;
  Node(int left,int right){
  this.left = left; this.right = right;
}
